<객체지향>

- 객체지향 특징
    1. 코드의 재사용성이 높다.
    2. 코드의 유지보수가 간편하다.
    3. 중복된 코드를 쉽게 제거 가능하다.
- 클래스와 객체
    
    클래스란?
    
    → 객체의 설계도
    
    객체란?
    
    → 클래스에 정의된 내용대로 메모리에 생성된 것
    
    즉, 설계도는 제품을 만드는데에만 필요하지 직접 사용하는 것이 아니므로
    
         클래스도 객체를 만드는데에만 사용된다.
    
    인스턴스란?
    
    → 클래스로부터 객체를 생성하는 과정을 인스턴스화라고 한다.
      또한 어떤 클래스에서 만들어진 객체를 인스턴스라고 한다.
    
        ex) 책상은 객체다 o
            책상은 책상 클래스의 인스턴스이다 o
 
    객체의 구성요소?
    
    → 속성: 멤버변수 / 기능: 메서드
    
- 인스턴스 생성과 사용
    
    tv 클래스를 통해 객체를 생성한다 할 때
    
    1. Tv t; → Tv클래스 타입의 참조변수 t를 선언
    2. new Tv(); → Tv클래스의 인스턴스가 메모리에 생성된다.
                   (이떄 각 맴버변수들은 기본값으로 초기화 된다.)
        
    3. t = new Tv(); → 2번에서 생성한 인스턴스 주소가 0x100이라 할때
                       참조변수 t가 0x100을 가르키고 이 참조변수를 통해 인스턴스에 접근 가능하다.
        
    
    💡 규칙1: 인스턴스는 참조변수를 통해서만 다룰 수 있다.
   
    
- 객체 배열
    
    객체배열이란?
    
    → 참조변수들을 하나로 묶은 참조변수 배열
      즉, 객체를 다루기 위한 참조변수들이 많아지는 것이다.
    
    → 단, 객체배열도 배열이므로 같은 타입의 객체만 저장 가능하다.
    
    → 객체배열-Instance_Array.java 참조
    
- 그래서 다시 클래스란?
    
    → 데이터(구조체) + 함수 형태
      (구조체: 자료형 종류 상관없이 서로 관계가있는 변수들을 하나로 묶은 것)
    
    → 즉, 서로 관계가있는 변수들 모으고 또한 그것들과 관계가 있는 메서드까지 하나로 묶은 것이 클래스이다.
    
    → 이러면 장점은?
    
    → 기존에 존재하는 자료형 8개만으로는 표현의 한계가 있었지만..
      클래스를 통해 새로운 자료형을 만들면 표현이 다채로워진다.
    
    → 새로운 _Class_01.java 참조
    
        원래라면 시간 여러개를 다룰시 변수를 많이 선언하거나 배열을 이용하지만
    
        이러면 시분초가 뒤섞이거나 매번 변수를 추가하는 것이 번거롭다.
    
        하지만 예제처럼 클래스를 통해 새로운 타입을 만들면 간단해진다.
    
- 변수와 메서드
    
    변수의 종류는?
    
    → 지역변수, 맴버변수(클래스변수, 인스턴스변수)가 있다.
    
    지역변수: 클래스에서 맴버변수를 제외한 나머지 변수들..
    
    클래스변수: static 키워드와 함께 선언된 변수
    
    인스턴스변수: 클래스변수를 제외한 나머지 맴버변수
    
    
    💡 규칙2: 
    클래스변수 → 저장공간을 공유하므로 항상 공통된 값을 갖을 때 사용한다.(ex, 카드 크기)
    인스턴스변수 → 저장공간이 독립적이고 인스턴스가 생성될때마다 인스턴스변수가 새로 생성되므로 각기 다른 값을 유지할 수 있다. (ex, 카드 숫자)
    
    
    메서드란?
    
    → 높은 재사용성을 갖은 함수
      한번 만들어 놓으면 몇번이고 호출 가능하다.
    
    → 중복 코드 제거
    
        비슷한 역할을 하는 코드들을 묶어서 메서드로 만들면 중복코드도 제거할 수 있고 유지보수도 쉬워진다.
    
    → 프로그램 구조화
    
        복잡하고 긴 코드들을 구조화 시켜 프로그램의 전체 흐름을 한눈에 볼수있다.
    
    - 메서드의 실행흐름
        1. main메서드에서 메서드를 호출한다.
        2. 호출시 지정한 인자들이 메서드 매개변수에 대입된다.
        3. 그 후 메서드 {} 안에 명령어들이 차례로 실행된다.
        4. 명령어들이 실행되다가 return문을 만나면 호출한 메서드(main)으로 돌아와 이후 명령어들을 실행한다.
            
- return문
    
    return문이란?
    
    → 메서드가 실행되다가 return을 만나면 호출한 곳으로 되돌아간다.
    
   
    💡 규칙3: 반환타입이 void가 아닌경우...즉 반환값이 있는 경우 반드시 return문이 있어야하고 또한 return문 타입은 반환타입과 같아야 한다.
    
   
    
- JVM
    
    JVM이란?
    
    → 크게 3가지 영역이 있다..메서드 영역, 호출 영역, heep 영역
    
    - 메서드 영역
        
        → 클래스가 사용되면 클래스 정보와 클래스변수를 여기에 저장한다.
        
    - heep 영역
        
        → 인스턴스가 생성되면 여기에 저장된다.(즉, 인스턴스변수들도 여기에 저장)
        
    - 호출 영역
        
        → 메서드가 호출되면 여기에 불러와진다. 그리고 메서드 작업이 종료되면 호출 영역은 비워진다.
        
        → 흐름: 첫번째 메서드를 위한 공간이 맨밑에 마련되고 그 첫번째 메서드에서 다른 메서드를 호출하면 첫번째 메서드의 작업을 멈추고 
                두 번째 메서드가 실행된다. 이후 두번째 메서드가 작업을 끝내면 두번째 메서드를 위한 공간이 반환되고 첫번째 메서드가 실행된다.
        
        → 정리: 메서드가 수행을 마치면 메모리를 반환하고 스택에서 제거됨
        
                호출영역에서 제일위에있는것이 현재 실행중인 메서드임
                (밑에 메서드들은 대기상태)
        
                아래에 있는 메서드가 바로 위의 있는 메서드를 호출한 메서드이다.
        
                반환타입이 있는 메서드는 종료되면서 결과값을 호출한 메서드에게 반환한다.
        -> JVM_JVM.java 참조
                    
2022 = 03 = 28
